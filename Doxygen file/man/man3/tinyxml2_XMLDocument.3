.TH "tinyxml2::XMLDocument" 3 "Wed Apr 29 2020" "Version 1" "Research Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tinyxml2::XMLDocument
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinyxml2\&.h>\fP
.PP
Inherits \fBtinyxml2::XMLNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBXMLDocument\fP (bool processEntities=true, \fBWhitespace\fP whitespaceMode=\fBPRESERVE_WHITESPACE\fP)"
.br
.RI "constructor "
.ti -1c
.RI "\fB~XMLDocument\fP ()"
.br
.ti -1c
.RI "virtual \fBXMLDocument\fP * \fBToDocument\fP ()"
.br
.RI "Safely cast to a Document, or null\&. "
.ti -1c
.RI "virtual const \fBXMLDocument\fP * \fBToDocument\fP () const"
.br
.ti -1c
.RI "\fBXMLError\fP \fBParse\fP (const char *xml, size_t nBytes=static_cast< size_t >(\-1))"
.br
.ti -1c
.RI "\fBXMLError\fP \fBLoadFile\fP (const char *filename)"
.br
.ti -1c
.RI "\fBXMLError\fP \fBLoadFile\fP (FILE *)"
.br
.ti -1c
.RI "\fBXMLError\fP \fBSaveFile\fP (const char *filename, bool compact=false)"
.br
.ti -1c
.RI "\fBXMLError\fP \fBSaveFile\fP (FILE *fp, bool compact=false)"
.br
.ti -1c
.RI "bool \fBProcessEntities\fP () const"
.br
.ti -1c
.RI "\fBWhitespace\fP \fBWhitespaceMode\fP () const"
.br
.ti -1c
.RI "bool \fBHasBOM\fP () const"
.br
.ti -1c
.RI "void \fBSetBOM\fP (bool useBOM)"
.br
.ti -1c
.RI "\fBXMLElement\fP * \fBRootElement\fP ()"
.br
.ti -1c
.RI "const \fBXMLElement\fP * \fBRootElement\fP () const"
.br
.ti -1c
.RI "void \fBPrint\fP (\fBXMLPrinter\fP *streamer=0) const"
.br
.ti -1c
.RI "virtual bool \fBAccept\fP (\fBXMLVisitor\fP *visitor) const"
.br
.ti -1c
.RI "\fBXMLElement\fP * \fBNewElement\fP (const char *name)"
.br
.ti -1c
.RI "\fBXMLComment\fP * \fBNewComment\fP (const char *comment)"
.br
.ti -1c
.RI "\fBXMLText\fP * \fBNewText\fP (const char *text)"
.br
.ti -1c
.RI "\fBXMLDeclaration\fP * \fBNewDeclaration\fP (const char *text=0)"
.br
.ti -1c
.RI "\fBXMLUnknown\fP * \fBNewUnknown\fP (const char *text)"
.br
.ti -1c
.RI "void \fBDeleteNode\fP (\fBXMLNode\fP *node)"
.br
.ti -1c
.RI "void \fBClearError\fP ()"
.br
.ti -1c
.RI "bool \fBError\fP () const"
.br
.RI "Return true if there was an error parsing the document\&. "
.ti -1c
.RI "\fBXMLError\fP \fBErrorID\fP () const"
.br
.RI "Return the errorID\&. "
.ti -1c
.RI "const char * \fBErrorName\fP () const"
.br
.ti -1c
.RI "const char * \fBErrorStr\fP () const"
.br
.ti -1c
.RI "void \fBPrintError\fP () const"
.br
.RI "A (trivial) utility function that prints the \fBErrorStr()\fP to stdout\&. "
.ti -1c
.RI "int \fBErrorLineNum\fP () const"
.br
.RI "Return the line where the error occurred, or zero if unknown\&. "
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Clear the document, resetting it to the initial state\&. "
.ti -1c
.RI "void \fBDeepCopy\fP (\fBXMLDocument\fP *target) const"
.br
.ti -1c
.RI "char * \fBIdentify\fP (char *p, \fBXMLNode\fP **node)"
.br
.ti -1c
.RI "void \fBMarkInUse\fP (const \fBXMLNode\fP *const)"
.br
.ti -1c
.RI "virtual \fBXMLNode\fP * \fBShallowClone\fP (\fBXMLDocument\fP *) const"
.br
.ti -1c
.RI "virtual bool \fBShallowEqual\fP (const \fBXMLNode\fP *) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const char * \fBErrorIDToName\fP (\fBXMLError\fP errorID)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBXMLElement\fP"
.br
.ti -1c
.RI "class \fBXMLNode\fP"
.br
.ti -1c
.RI "class \fBXMLText\fP"
.br
.ti -1c
.RI "class \fBXMLComment\fP"
.br
.ti -1c
.RI "class \fBXMLDeclaration\fP"
.br
.ti -1c
.RI "class \fBXMLUnknown\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A Document binds together all the functionality\&. It can be saved, loaded, and printed to the screen\&. All Nodes are connected and allocated to a Document\&. If the Document is deleted, all its Nodes are also deleted\&. 
.PP
Definition at line 1654 of file tinyxml2\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "tinyxml2::XMLDocument::XMLDocument (bool processEntities = \fCtrue\fP, \fBWhitespace\fP whitespaceMode = \fC\fBPRESERVE_WHITESPACE\fP\fP)"

.PP
constructor 
.PP
Definition at line 2119 of file tinyxml2\&.cpp\&.
.SS "tinyxml2::XMLDocument::~XMLDocument ()"

.PP
Definition at line 2141 of file tinyxml2\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool tinyxml2::XMLDocument::Accept (\fBXMLVisitor\fP * visitor) const\fC [virtual]\fP"
Accept a hierarchical visit of the nodes in the TinyXML-2 DOM\&. Every node in the XML tree will be conditionally visited and the host will be called back via the \fBXMLVisitor\fP interface\&. This is essentially a SAX interface for TinyXML-2\&. (Note however it doesn't re-parse the XML for the callbacks, so the performance of TinyXML-2 is unchanged by using this interface versus any other\&.) The interface has been based on ideas from:
.IP "\(bu" 2
http://www.saxproject.org/
.IP "\(bu" 2
http://c2.com/cgi/wiki?HierarchicalVisitorPattern Which are both good references for 'visiting'\&. An example of using \fBAccept()\fP: 
.PP
.nf
XMLPrinter printer;
tinyxmlDoc.Accept( &printer );
const char* xmlcstr = printer.CStr();

.fi
.PP
 
.PP

.PP
Implements \fBtinyxml2::XMLNode\fP\&.
.PP
Definition at line 758 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::Clear ()"

.PP
Clear the document, resetting it to the initial state\&. 
.PP
Definition at line 2160 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::ClearError ()\fC [inline]\fP"

.PP
Definition at line 1809 of file tinyxml2\&.h\&.
.SS "void tinyxml2::XMLDocument::DeepCopy (\fBXMLDocument\fP * target) const"
Copies this document to a target document\&. The target will be completely cleared before the copy\&. If you want to copy a sub-tree, see \fBXMLNode::DeepClone()\fP\&. NOTE: that the 'target' must be non-null\&. 
.PP
Definition at line 2194 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::DeleteNode (\fBXMLNode\fP * node)"
Delete a node associated with this document\&. It will be unlinked from the DOM\&. 
.PP
Definition at line 2262 of file tinyxml2\&.cpp\&.
.SS "bool tinyxml2::XMLDocument::Error () const\fC [inline]\fP"

.PP
Return true if there was an error parsing the document\&. 
.PP
Definition at line 1814 of file tinyxml2\&.h\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::ErrorID () const\fC [inline]\fP"

.PP
Return the errorID\&. 
.PP
Definition at line 1818 of file tinyxml2\&.h\&.
.SS "const char * tinyxml2::XMLDocument::ErrorIDToName (\fBXMLError\fP errorID)\fC [static]\fP"

.PP
Definition at line 2454 of file tinyxml2\&.cpp\&.
.SS "int tinyxml2::XMLDocument::ErrorLineNum () const\fC [inline]\fP"

.PP
Return the line where the error occurred, or zero if unknown\&. 
.PP
Definition at line 1833 of file tinyxml2\&.h\&.
.SS "const char * tinyxml2::XMLDocument::ErrorName () const"

.PP
Definition at line 2473 of file tinyxml2\&.cpp\&.
.SS "const char * tinyxml2::XMLDocument::ErrorStr () const"
Returns a 'long form' error description\&. A hopefully helpful diagnostic with location, line number, and/or additional info\&. 
.PP
Definition at line 2462 of file tinyxml2\&.cpp\&.
.SS "bool tinyxml2::XMLDocument::HasBOM () const\fC [inline]\fP"
Returns true if this document has a leading Byte Order Mark of UTF8\&. 
.PP
Definition at line 1732 of file tinyxml2\&.h\&.
.SS "char * tinyxml2::XMLDocument::Identify (char * p, \fBXMLNode\fP ** node)"

.PP
Definition at line 688 of file tinyxml2\&.cpp\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::LoadFile (const char * filename)"
Load an XML file from disk\&. Returns XML_SUCCESS (0) on success, or an errorID\&. 
.PP
Definition at line 2280 of file tinyxml2\&.cpp\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::LoadFile (FILE * fp)"
Load an XML file from disk\&. You are responsible for providing and closing the FILE*\&. NOTE: The file should be opened as binary ('rb') not text in order for TinyXML-2 to correctly do newline normalization\&. Returns XML_SUCCESS (0) on success, or an errorID\&. 
.PP
Definition at line 2299 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::MarkInUse (const \fBXMLNode\fP * const node)"

.PP
Definition at line 2147 of file tinyxml2\&.cpp\&.
.SS "\fBXMLComment\fP * tinyxml2::XMLDocument::NewComment (const char * comment)"
Create a new Comment associated with this Document\&. The memory for the Comment is managed by the Document\&. 
.PP
Definition at line 2215 of file tinyxml2\&.cpp\&.
.SS "\fBXMLDeclaration\fP * tinyxml2::XMLDocument::NewDeclaration (const char * text = \fC0\fP)"
Create a new Declaration associated with this Document\&. The memory for the object is managed by the Document\&. If the 'text' param is null, the standard declaration is used\&.: 
.PP
.nf
    <?xml version="1.0" encoding="UTF-8"?>

.fi
.PP
 
.PP
Definition at line 2231 of file tinyxml2\&.cpp\&.
.SS "\fBXMLElement\fP * tinyxml2::XMLDocument::NewElement (const char * name)"
Create a new Element associated with this Document\&. The memory for the Element is managed by the Document\&. 
.PP
Definition at line 2207 of file tinyxml2\&.cpp\&.
.SS "\fBXMLText\fP * tinyxml2::XMLDocument::NewText (const char * text)"
Create a new Text associated with this Document\&. The memory for the Text is managed by the Document\&. 
.PP
Definition at line 2223 of file tinyxml2\&.cpp\&.
.SS "\fBXMLUnknown\fP * tinyxml2::XMLDocument::NewUnknown (const char * text)"
Create a new Unknown associated with this Document\&. The memory for the object is managed by the Document\&. 
.PP
Definition at line 2239 of file tinyxml2\&.cpp\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::Parse (const char * xml, size_t nBytes = \fCstatic_cast<size_t>(\-1)\fP)"
Parse an XML file from a character string\&. Returns XML_SUCCESS (0) on success, or an errorID\&. You may optionally pass in the 'nBytes', which is the number of bytes which will be parsed\&. If not specified, TinyXML-2 will assume 'xml' points to a null terminated string\&. 
.PP
Definition at line 2383 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::Print (\fBXMLPrinter\fP * streamer = \fC0\fP) const"
Print the Document\&. If the Printer is not provided, it will print to stdout\&. If you provide Printer, this can print to a file: 
.PP
.nf
XMLPrinter printer( fp );
doc.Print( &printer );

.fi
.PP
 Or you can use a printer to print to memory: 
.PP
.nf
XMLPrinter printer;
doc.Print( &printer );
// printer.CStr() has a const char* to the XML

.fi
.PP
 
.PP
Definition at line 2414 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::PrintError () const"

.PP
A (trivial) utility function that prints the \fBErrorStr()\fP to stdout\&. 
.PP
Definition at line 2468 of file tinyxml2\&.cpp\&.
.SS "bool tinyxml2::XMLDocument::ProcessEntities () const\fC [inline]\fP"

.PP
Definition at line 1722 of file tinyxml2\&.h\&.
.SS "\fBXMLElement\fP* tinyxml2::XMLDocument::RootElement ()\fC [inline]\fP"
Return the root element of DOM\&. Equivalent to \fBFirstChildElement()\fP\&. To get the first node, use \fBFirstChild()\fP\&. 
.PP
Definition at line 1744 of file tinyxml2\&.h\&.
.SS "const \fBXMLElement\fP* tinyxml2::XMLDocument::RootElement () const\fC [inline]\fP"

.PP
Definition at line 1747 of file tinyxml2\&.h\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::SaveFile (const char * filename, bool compact = \fCfalse\fP)"
Save the XML file to disk\&. Returns XML_SUCCESS (0) on success, or an errorID\&. 
.PP
Definition at line 2353 of file tinyxml2\&.cpp\&.
.SS "\fBXMLError\fP tinyxml2::XMLDocument::SaveFile (FILE * fp, bool compact = \fCfalse\fP)"
Save the XML file to disk\&. You are responsible for providing and closing the FILE*\&. Returns XML_SUCCESS (0) on success, or an errorID\&. 
.PP
Definition at line 2372 of file tinyxml2\&.cpp\&.
.SS "void tinyxml2::XMLDocument::SetBOM (bool useBOM)\fC [inline]\fP"
Sets whether to write the BOM when writing the file\&. 
.PP
Definition at line 1737 of file tinyxml2\&.h\&.
.SS "virtual \fBXMLNode\fP* tinyxml2::XMLDocument::ShallowClone (\fBXMLDocument\fP * document) const\fC [inline]\fP, \fC [virtual]\fP"
Make a copy of this node, but not its children\&. You may pass in a Document pointer that will be the owner of the new Node\&. If the 'document' is null, then the node returned will be allocated from the current Document\&. (this->\fBGetDocument()\fP) Note: if called on a \fBXMLDocument\fP, this will return null\&. 
.PP
Implements \fBtinyxml2::XMLNode\fP\&.
.PP
Definition at line 1855 of file tinyxml2\&.h\&.
.SS "virtual bool tinyxml2::XMLDocument::ShallowEqual (const \fBXMLNode\fP * compare) const\fC [inline]\fP, \fC [virtual]\fP"
Test if 2 nodes are the same, but don't test children\&. The 2 nodes do not need to be in the same Document\&. Note: if called on a \fBXMLDocument\fP, this will return false\&. 
.PP
Implements \fBtinyxml2::XMLNode\fP\&.
.PP
Definition at line 1858 of file tinyxml2\&.h\&.
.SS "virtual \fBXMLDocument\fP* tinyxml2::XMLDocument::ToDocument ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Safely cast to a Document, or null\&. 
.PP
Reimplemented from \fBtinyxml2::XMLNode\fP\&.
.PP
Definition at line 1669 of file tinyxml2\&.h\&.
.SS "virtual const \fBXMLDocument\fP* tinyxml2::XMLDocument::ToDocument () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBtinyxml2::XMLNode\fP\&.
.PP
Definition at line 1673 of file tinyxml2\&.h\&.
.SS "\fBWhitespace\fP tinyxml2::XMLDocument::WhitespaceMode () const\fC [inline]\fP"

.PP
Definition at line 1725 of file tinyxml2\&.h\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBXMLComment\fP\fC [friend]\fP"

.PP
Definition at line 1661 of file tinyxml2\&.h\&.
.SS "friend class \fBXMLDeclaration\fP\fC [friend]\fP"

.PP
Definition at line 1662 of file tinyxml2\&.h\&.
.SS "friend class \fBXMLElement\fP\fC [friend]\fP"

.PP
Definition at line 1656 of file tinyxml2\&.h\&.
.SS "friend class \fBXMLNode\fP\fC [friend]\fP"

.PP
Definition at line 1659 of file tinyxml2\&.h\&.
.SS "friend class \fBXMLText\fP\fC [friend]\fP"

.PP
Definition at line 1660 of file tinyxml2\&.h\&.
.SS "friend class \fBXMLUnknown\fP\fC [friend]\fP"

.PP
Definition at line 1663 of file tinyxml2\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Research Project from the source code\&.
